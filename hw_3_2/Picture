import javax.swing.*;
import java.io.FileNotFoundException;
import java.util.Arrays;
import java.util.Random;
import java.util.Scanner;
import java.util.Vector;
import java.io.File;
import java.util.regex.Pattern;

public class Picture {
     Vector<String> images = new Vector<String>();
     Vector<String> words = new Vector<String>();
     StringBuilder word = new StringBuilder();
     StringBuilder originalWord = new StringBuilder();
     int countRightGuesses = 0;
     int lengthOfWord = 0;
     boolean[] printPatternImage;
     boolean[] printPatternWord;
     int numberOfGuesses = 0;

    public void printVector() {
//        for (int i = 0; i < images.size(); i++) {
//            System.out.println(images.elementAt(i));
//
//        }
        for (int i = 0; i < words.size(); i++) {
            System.out.println(words.elementAt(i));
        }
    }

    public void addLines(Scanner s, boolean trigger)	{
        while ( s.hasNext() ) {
//            System.out.println(s.next());
            if (trigger) {
                this.images.add( s.next() );
            }
            else {
                this.words.add( s.next() );
            }
        }
    }

    public void readFromFiles(String argv, boolean trigger) throws FileNotFoundException {
        File f = new File(argv);
//        System.out.println(f.canRead());
        Scanner s = new Scanner(f);
        addLines(s, trigger);
        s.close();
    }

    public void printImage() {
        for (int i = 0; i < images.size(); i++) {
            System.out.print("\t");
            for (int j = 0; j < printPatternImage.length; j++) {
                System.out.print(printPatternImage[j] ? images.elementAt(i).charAt(j) : '.');
            }

            System.out.println();
        }
    }

    public String printWord() {
        String str = "";
        for (int i = 0; i < originalWord.length(); i++) {
                str += printPatternWord[i] ? originalWord.charAt(i) : '.';
        }

        return str;
    }

    public void printMessage() {
        for (int start = lengthOfWord - countRightGuesses; start <= lengthOfWord; start++) {
            for (int i = start; i < printPatternImage.length; i += lengthOfWord) {
                if (printPatternImage[i]) {
                    break;
                }

                printPatternImage[i] = true;
            }
        }

        printImage();
        System.out.println((word.length() == 0 ? "The word was" : countRightGuesses) + ": " + printWord());
    }

    public boolean checkGuessInvalid(String guess) {
        String matchPattern = "[a-z]{1}";
        if (Pattern.matches(guess, matchPattern)) {
            return false;
        }

        return true;
    }

    public void revealWord(String guess, int index) {
        for (int j = 0; j < printPatternWord.length; j++) {
            if (!printPatternWord[j] && originalWord.charAt(j) == guess.charAt(index)) {
                printPatternWord[j] = true;
                break;
            }
        }
    }

    public void howManyCorrectGuesses(String guess) {
        for (int i = 0; i < guess.length(); i++) {
            int index = word.indexOf(guess.substring(i, i + 1));
            if (index != -1) {
                word.deleteCharAt(index);
                countRightGuesses++;

                revealWord(guess, i);
            }
        }
    }

    public void startPlayingGame() {
        Scanner sc = new Scanner(System.in);

        while (!words.isEmpty()) {
//            System.out.println(words.size());
            String newWord = words.remove( new Random().nextInt( words.size() ) );
            word = new StringBuilder( newWord );
            originalWord = new StringBuilder( newWord );
            countRightGuesses = 0;
            lengthOfWord = word.length();
            printPatternWord = new boolean[lengthOfWord];

            printMessage();

            while (word.length() != 0) {
                String guess = sc.next();
//                System.out.println(guess);


//                if (checkGuessInvalid(guess)) {
//                    continue;
//                }

                howManyCorrectGuesses(guess);
                printMessage();
                System.out.println();

                if (++numberOfGuesses == 9) {
                    System.out.println("You ran out of chances. Game Over! The world is: " + originalWord);
                    break;
                }
            }

            Arrays.fill(printPatternImage, false);
            numberOfGuesses = 0;

        }

        sc.close();
        System.out.println("No more words left to guess\nI hope you enjoyed the game, bye!");
    }

    public static void main(String args[]) throws FileNotFoundException	{
        Picture p = new Picture();
        p.readFromFiles(args[0], false);
        p.readFromFiles(args[1], true);
//        p.readFromFiles("src/batman.txt", true);
//        p.readFromFiles("src/words.txt", false);
        p.printPatternImage = new boolean[p.images.elementAt(0).length()];
//        p.printVector();
        p.startPlayingGame();

    }
}
